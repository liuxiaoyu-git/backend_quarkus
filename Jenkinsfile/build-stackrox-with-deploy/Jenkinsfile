// def JENKINS_SLAVE_IMAGE = "maven36-with-tools"
def repository
def nexus_url
pipeline {
 agent {
        kubernetes {
        cloud 'openshift'
        yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  containers:
  - name: jnlp
    image: quay.io/openshift/origin-jenkins-agent-base:latest
    command:
    args: ['\${computer.jnlpmac}', '\${computer.name}']
    workingDir: /tmp
    tty: false
  - name: skopeo
    image: quay.io/skopeo/stable:latest
    command:
    - cat
    tty: true
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
  - name: maven
    image: registry.access.redhat.com/ubi8/openjdk-11:latest
    command:
    - cat
    tty: true
    resources:
      requests:
        memory: 2Gi
        cpu: 1
  - name: tools
    image: quay.io/voravitl/tools:jenkins
    command:
    - cat
    tty: true
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
"""
        }
  }
  options {
    // set a timeout of 30 minutes for this pipeline
    timeout(time: 30, unit: 'MINUTES')
  }
  environment {
    mvnCmd = "mvn -s ./nexus_settings.xml "
    version = ""
    imageName = "backend"
    devTag = "0.0-0"
    nexusUser = ""
    nexusPassword =""
    nexus_url=""
    nexusContainerRepo = "docker"
    ROX_API_TOKEN=""
  }
  
  stages {
    // Checkout Source Code.
    stage('Checkout Source') {
      steps {
        container("maven") {
            checkout scm
        }
      }
    }
    // Prepare Environment Variables
    stage('Prepare Env'){
      parallel {
        stage('App Version') {
          steps {
            container("maven") {
              dir('code') {
                script {
                    version = sh (
                        script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout',
                        returnStdout: true
                    ).trim()
                    devTag = "${version}-" + currentBuild.number
                    echo "Image Name: ${imageName}"
                    echo "version: ${version}"
                    echo "devTag: ${devTag}"
                    echo "Backend URL: ${env.BACKEND_URL}"
                    echo "CICD Project: ${env.CICD_PROJECT}"
                    echo "Development Project: ${env.DEV_PROJECT}"
                }
              }
            }
          }
        }
        stage('Get Config'){
          steps {
            container("jnlp") {
              dir('code') {
                script {
                    nexusUser = sh (
                        script: 'oc get secret ${NEXUS_SECRET} -o jsonpath="{.data.username}"| base64 -d -',
                        returnStdout: true
                    ).trim()
                    nexusPassword = sh (
                        script: 'oc get secret ${NEXUS_SECRET} -o jsonpath="{.data.password}"| base64 -d -',
                        returnStdout: true
                    ).trim()
                    nexus_url = sh (
                        script: 'oc get route nexus-registry -n ci-cd -o jsonpath="{.spec.host}"',
                        returnStdout: true
                    ).trim()
                    ROX_API_TOKEN = sh (
                        script: 'oc get secret ${STACKROX_SECRET} -n ci-cd -o jsonpath="{.data.token}"| base64 -d -',
                        returnStdout: true
                    ).trim()
                    echo "nexus_url: ${nexus_url}"
                    echo "Nexus User: ${nexusUser}"
                }
              }
            }
          }
        }
      }
    }
    // Build the JAR
    stage('Build Binary') {
      steps {
        container("maven") {
            dir('code') {
                echo "Building binary for ${imageName}"
                script {
                    sh "${mvnCmd} -Dinternal.repo.username=${nexusUser} -Dinternal.repo.password=${nexusPassword} -DskipTests=true clean package"
                }
            }
        }
      }
    }
    // Test
    stage('Test') {
      parallel {
        // Unit Test
        stage('Unit Tests') {
          steps {
            container("maven") {
                dir('code') {
                    echo "Running Unit Tests"
                    sh "${mvnCmd} -Dinternal.repo.username=${nexusUser} -Dinternal.repo.password=${nexusPassword} test"
                    step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                }
            }
          }
        }
        // Using Maven call SonarQube for Code Analysis
        stage('Code Analysis') {
          steps {
            container("maven") {
                dir('code') {
                script {
                    echo "Running Code Analysis"
                    sh "${mvnCmd} sonar:sonar -Dinternal.repo.username=${nexusUser} -Dinternal.repo.password=${nexusPassword} -Dsonar.host.url=${env.SONARQUBE_SVC} -Dsonar.projectName=${imageName}-${devTag} -Dsonar.projectVersion=${devTag}"
                }
                }
            }
          }
        }
      }
    }
    // Create Build Config
    stage('Create Build Config') {
        when {
          expression {
            openshift.withCluster() {
              openshift.withProject(env.CICD_PROJECT) {
                return !openshift.selector("bc", "${imageName}").exists()
              }
            }
          }
       } 
      steps {
        echo "Create build config ${imageName}:latest"
        script {
          echo "Use internal image registry"
          if(env.USE_INTERNAL_REGISTRY.toBoolean()){
            openshift.withCluster() {
              openshift.withProject(env.CICD_PROJECT) {
                openshift.newBuild(
                  "--name=${imageName}",
                  "--to=${imageName}:latest",
                  "--strategy=docker",
                  "--binary=true"
                )
              }
            }
          }else{
            echo "Use external image registry"
            openshift.withCluster() {
              openshift.withProject(env.CICD_PROJECT) {
                openshift.newBuild(
                  "--name=${imageName}",
                  // "--to=${env.NEXUS_REGISTRY}/${imageName}:latest",
                  "--to=${nexus_url}/${imageName}:latest",
                  "--to-docker=true",
                  "--push-secret=nexus-registry",
                  "--strategy=docker",
                  "--binary=true"
                )
              }
            }
          }
          openshift.withCluster() {
            openshift.withProject(env.CICD_PROJECT) {
              def bc = openshift.selector("bc/${imageName}").object()
              bc.spec.strategy.dockerStrategy.dockerfilePath = "src/main/docker/Dockerfile.jvm"
              openshift.apply(bc)
            }
          }         
        }
      }
    }
    // Build Container Image
    stage('Build Container Image') {
      steps {
          echo "Build Container Image ${imageName}"
          dir('code') {
            script {
              openshift.withCluster() {
                openshift.withProject(env.CICD_PROJECT) {
                  openshift.startBuild(
                    "${imageName}",
                    "--from-dir=.",
                    "--wait"
                  )
                  
                // if(env.USE_INTERNAL_REGISTRY.toBoolean()){
                //   openshift.tag("${imageName}:latest", "${imageName}:${devTag}")
                // } else {
                  container('skopeo'){
                    sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds ${nexusUser}:${nexusPassword} --dest-creds ${nexusUser}:${nexusPassword} docker://${env.NEXUS_REGISTRY_SVC}/${imageName}:latest docker://${env.NEXUS_REGISTRY_SVC}/${imageName}:${devTag}"  
                  }
                  
                // }
              }
            }
          }
        }
      }
    }
    // Scan image with stackrox
     stage('Scan Image') {
      steps {    
        container("tools") {
          echo "Scan image: ${NEXUS_REGISTRY}/${imageName}:${devTag}}"
          echo "Central: ${env.ROX_CENTRAL_ADDRESS}"
          sh "export ROX_API_TOKEN=${ROX_API_TOKEN};roxctl --insecure-skip-tls-verify -e ${ROX_CENTRAL_ADDRESS} image check --image=${NEXUS_REGISTRY}/${imageName}:${devTag} --output=table"
        }
          
          // stackrox (
          //           apiToken: "${ROX_API_TOKEN}",
          //           caCertPEM: '',
          //           enableTLSVerification: false,
          //           failOnCriticalPluginError: true,
          //           failOnPolicyEvalFailure: true,
          //           portalAddress: "${env.ROX_CENTRAL_ADDRESS}",
          //           imageNames: "${NEXUS_REGISTRY}/${imageName}:${devTag}"
          // )
       }
    }  
     // Create Service
    stage('Create Service') {
      when {
        expression {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              return !openshift.selector("svc", "${imageName}").exists()
            }
          }
        }
      }
      steps {
          script {
            openshift.withCluster() {
              openshift.withProject(env.DEV_PROJECT) {
                def template = './manifests/backend-svc-dev.yaml'
                openshift.apply(
                  openshift.process("-f", template)
                )
              }
            }
          }      
      }
    }
    // Create Route
    stage('Create Route') {
      when {
        expression {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              return !openshift.selector("route", "${imageName}").exists()
            }
          }
        }
      }
      steps {
          script {
            openshift.withCluster() {
              openshift.withProject(env.DEV_PROJECT) {
                def template = './manifests/backend-route-dev.yaml'
                openshift.apply(
                  openshift.process("-f", template)
                )
              }
            }
          }
      }
    }
    // Scan Deployment
    stage('Scan Deployment'){
      steps {
        container("jnlp") {
          echo "Process teamplate to deployment"
            script {
              sh "oc process -f manifests/backend-deployment-dev.yaml > dev.yaml"
            }  
        }
        container("tools") {
          echo "Check Deployment"
            script {
              sh "export ROX_API_TOKEN=${ROX_API_TOKEN};roxctl --insecure-skip-tls-verify -e ${ROX_CENTRAL_ADDRESS} deployment check --file=dev.yaml --output=table"
            }
            
        }
      }
    }
    // Create Deployment Config
    stage('Create Deployment Config') {
      steps {
        echo "Create deployment config: env.DEV_PROJECT"
          script {
            // if(env.USE_INTERNAL_REGISTRY.toBoolean()){
            //   nexus_url = "image-registry.openshift-image-registry.svc:5000/ci-cd"
            // } else {
            //   nexus_url = sh (
            //     script: 'oc get route nexus-registry -n ci-cd -o jsonpath="{.spec.host}"',
            //     returnStdout: true
            //   ).trim()
            // }

            openshift.withCluster() {
              openshift.withProject(env.DEV_PROJECT) {
                def template = './manifests/backend-deployment-dev.yaml'  
                  openshift.apply(
                      openshift.process(
                        "-f", template,
                        "-p", "REPOSITORY=${nexus_url}",
                        "-p", "IMAGE_NAME=${imageName}",
                        "-p", "IMAGE_TAG=${devTag}",
                        "-p", "BACKEND_URL=${env.BACKEND_URL}",
                        "-p", "APP_VERSION=${version}"
                      )
                    )  
                //openshift.selector("dc", "${imageName}").rollout().pause();
              }
            }
        }
      }
    }
  }
}

// stage('Scan Image') {
//       when {
//         expression {
//           script {
//              if(env.STACKROX){
//                if(env.STACKROX.toBoolean())
//                   return true;
//                 else
//                     return false;
                  
//               }
//           }
//         }
//       }
    //   steps {
    //     echo "Scan image ${imageName}:${devTag}"
    //     script {
    //       openshift.withCluster() {
    //           openshift.withProject(env.CICD_PROJECT) {
    //                   ROX_API_TOKEN = sh (
    //                       script: 'oc get secret ${STACKROX_SECRET} -o jsonpath="{.data.token}"| base64 -d -',
    //                       returnStdout: true
    //                   ).trim()
    //                   sh "export ROX_API_TOKEN=${ROX_API_TOKEN};roxctl --insecure-skip-tls-verify -e ${ROX_CENTRAL_ADDRESS} image scan --image=${NEXUS_REGISTRY}/${imageName}:${devTag} --output=json > /tmp/cve.txt"
    //                   numCriticalCVEs = sh (
    //                       script: 'cat /tmp/cve.txt| jq ".result.summary.CRITICAL"',
    //                       returnStdout: true
    //                   ).trim()
    //                   echo "cat /tmp/cve.txt"
    //                   echo "CRITICAL CVEs: ${numCriticalCVEs}"
    //                   echo "Max CRITICAL CVEs: ${env.MAX_CRITICAL_CVES}"
    //                   if(numCriticalCVEs.toInteger() > env.MAX_CRITICAL_CVES.toInteger()){
    //                       currentBuild.result = 'ABORTED'
    //                       echo "Number of CRITICAL CVEs exceed limits"
    //                       sh "exit 1"
    //                   }
    //           }
    //       }
    //     }
    //   }
    // }  