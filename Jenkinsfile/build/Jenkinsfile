def JENKINS_SLAVE_IMAGE = "maven36-with-tools"
def repository
def nexus_url
pipeline {
  agent {
    kubernetes {
      label "maven36-with-tools"
      cloud "openshift"
      inheritFrom "maven"
      containerTemplate {
        name "jnlp"
        image "image-registry.openshift-image-registry.svc:5000/ci-cd/${JENKINS_SLAVE_IMAGE}:latest"
        resourceRequestMemory "600Mi"
        resourceLimitMemory "2Gi"
        resourceRequestCpu "1"
        resourceLimitCpu "2"
      }
    }
  }
  options {
    // set a timeout of 30 minutes for this pipeline
    timeout(time: 30, unit: 'MINUTES')
  }
  environment {
    mvnCmd = "mvn -s ./nexus_settings.xml "
    //mvnCmd = "mvn "
    version = ""
    imageName = "backend"
    devTag = "0.0-0"
    nexusUser = ""
    nexusPassword =""
    nexusContainerRepo = "docker"
  }
  stages {
    // Checkout Source Code.
    stage('Checkout Source') {
      steps {
        checkout scm
        dir('code') {
          script {
            version = sh (
              script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout',
              returnStdout: true
            ).trim()
            devTag = "${version}-" + currentBuild.number
            nexusUser = sh (
              script: 'oc get secret ${NEXUS_SECRET} -o jsonpath="{.data.username}"| base64 -d -',
              returnStdout: true
            ).trim()
            nexusPassword = sh (
              script: 'oc get secret ${NEXUS_SECRET} -o jsonpath="{.data.password}"| base64 -d -',
              returnStdout: true
            ).trim()
            // def nexusCreds = 'nexus_host = "'+env.NEXUS_SVC+'"\nnexus_repository = "'+nexusContainerRepo+'"\n'+'nexus_username = "'+nexusUser+'"\n'+'nexus_password = "'+nexusPassword+'"\n'
            // writeFile file: ".credentials", text: nexusCreds
            echo "Image Name: ${imageName}"
            echo "version: ${version}"
            echo "devTag: ${devTag}"
            echo "Backend URL: ${env.BACKEND_URL}"
            echo "CICD Project: ${env.CICD_PROJECT}"
            echo "Development Project: ${env.DEV_PROJECT}"
            echo "Nexus User: ${nexusUser}"
          }
        }
      }
    }
    // Build the JAR
    stage('Build Binary') {
      steps {

        dir('code') {

          echo "Building binary for ${imageName}"
          script {
            sh "${mvnCmd} -Dquarkus.package.type=fast-jar -Dinternal.repo.username=${nexusUser} -Dinternal.repo.password=${nexusPassword} -DskipTests=true clean package"
          }
        }
      }
    }
    // Test
    stage('Test') {
      parallel {
        // Unit Test
        stage('Unit Tests') {
          steps {
            dir('code') {
              echo "Running Unit Tests"
              sh "${mvnCmd} -Dinternal.repo.username=${nexusUser} -Dinternal.repo.password=${nexusPassword} test"
              step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
            }
          }
        }
        // Using Maven call SonarQube for Code Analysis
        stage('Code Analysis') {
          steps {
            dir('code') {
              script {
                echo "Running Code Analysis"
                sh "${mvnCmd} sonar:sonar -Dinternal.repo.username=${nexusUser} -Dinternal.repo.password=${nexusPassword} -Dsonar.host.url=${env.SONARQUBE_SVC} -Dsonar.projectName=${imageName}-${devTag} -Dsonar.projectVersion=${devTag}"
              }
            }
          }
        }
      }
    }
    // Publish the uberjar file to Nexus
    // stage('Publish to Nexus') {
    //   steps {
    //     dir('code') {
    //       echo "Publish to Nexus"
          //sh "${mvnCmd} deploy -Dquarkus.package.uber-jar=true -Dinternal.repo.username=${nexusUser} -Dinternal.repo.password=${nexusPassword} -DskipTests=true -DaltDeploymentRepository=nexus::default::${env.NEXUS_SVC}/repository/maven-releases"
    //       sh "${mvnCmd} deploy -Dquarkus.package.uber-jar=true -Dinternal.repo.username=${nexusUser} -Dinternal.repo.password=${nexusPassword} -DskipTests=true"

    //     }
    //   }
    // }
    // Create Build Config
    stage('Create Build Config') {
      when {
        expression {
          openshift.withCluster() {
            openshift.withProject(env.CICD_PROJECT) {
              return !openshift.selector("bc", "${imageName}").exists()
            }
          }
        }
      }
      steps {
        echo "Create build config ${imageName}:latest"
        script {
          echo "Use internal image registry"
          if(env.USE_INTERNAL_REGISTRY.toBoolean()){
            openshift.withCluster() {
              openshift.withProject(env.CICD_PROJECT) {
                openshift.newBuild(
                  "--name=${imageName}",
                  "--to=${imageName}:latest",
                  "--strategy=docker",
                  "--binary=true"
                )
              }
            }
          }else{
            echo "Use external image registry"
            nexus_url = sh (
              script: 'oc get route nexus-registry -n ci-cd -o jsonpath="{.spec.host}"',
              returnStdout: true
            ).trim()
            println "nexus_url: ${nexus_url}"
            openshift.withCluster() {
              openshift.withProject(env.CICD_PROJECT) {
                openshift.newBuild(
                  "--name=${imageName}",
                  // "--to=${env.NEXUS_REGISTRY}/${imageName}:latest",
                  "--to=${nexus_url}/${imageName}:latest",
                  "--to-docker=true",
                  "--push-secret=nexus-registry",
                  "--strategy=docker",
                  "--binary=true"
                )
              }
            }
          }
          openshift.withCluster() {
            openshift.withProject(env.CICD_PROJECT) {
              def bc = openshift.selector("bc/${imageName}").object()
              bc.spec.strategy.dockerStrategy.dockerfilePath = "src/main/docker/Dockerfile.jvm"
              openshift.apply(bc)
            }
          }
            
        }
      }
    }
    // Build Container Image
    stage('Build Container Image') {
      steps {
        echo "Build Container Image ${imageName}"
        dir('code') {
          script {
            openshift.withCluster() {
              openshift.withProject(env.CICD_PROJECT) {
                openshift.startBuild(
                  "${imageName}",
                  "--from-dir=.",
                  "--wait"
                )
                if(env.USE_INTERNAL_REGISTRY.toBoolean()){
                  openshift.tag("${imageName}:latest", "${imageName}:${devTag}")
                } else {
                  sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds ${nexusUser}:${nexusPassword} --dest-creds ${nexusUser}:${nexusPassword} docker://${env.NEXUS_REGISTRY_SVC}/${imageName}:latest docker://${env.NEXUS_REGISTRY_SVC}/${imageName}:${devTag}"  
                }
              }
            }
          }
        }
      }
    }
    // Scan with ACS/Stackrox
     stage('Scan Image') {
      steps {
        echo "Scan image ${imageName}"
          script {
                if(env.STACKROX.toBoolean()){
                  sh "export ROX_API_TOKEN=eyJhbGciOiJSUzI1NiIsImtpZCI6Imp3dGswIiwidHlwIjoiSldUIn0.eyJhdWQiOlsiaHR0cHM6Ly9zdGFja3JveC5pby9qd3Qtc291cmNlcyNhcGktdG9rZW5zIl0sImV4cCI6MTY3NDgzMDQ5NCwiaWF0IjoxNjQzMjk0NDk0LCJpc3MiOiJodHRwczovL3N0YWNrcm94LmlvL2p3dCIsImp0aSI6ImQ0ZDcwZDhhLWRmNzItNGU2ZC1hYWRiLTI4ZjBiMjNhNjQwNSIsIm5hbWUiOiJqZW5raW5zIiwicm9sZXMiOlsiQ29udGludW91cyBJbnRlZ3JhdGlvbiJdfQ.CHi0_QqNUlWWAJN0qXNsvH68fTtQgd8UnTibLljVECw5Pdcnks_orpZLl_JS_fV9uSGqzB15ynD2uLf3ooUtNrv1CPW9FZyPTHgaptQn-rYsSubdS4tTTNodMzM--Ts9vrhFacpRPfT3qHZjxspSQsqnzhT-EqyfyqRfe_Fzyi4K5yM-D6lK6TqGIp-kYkAZct6PXbxdxk-2Pkshm411HnM2iq2o8ywvOBXWU6d-pmbhzr1b0_d74abH2Rlc0RDTdaYhQR_OiBxobagojmEf1pW8ByWOlOKQ3wzppzX09jidpiCBkzDDRpwHY5nAd6OdyPNySMNCWUAXj9SSMZB5aTP0dhvNMXSt9LfidUgOGGLs7Xiwd8IK8Yn38LFxtMdOZKGPrnJpAOTGKc_neqyrVwqPIYyZkDZKZJoMPL3GODwmFvRTSG_HT-2fQb1VO5VwCA7NzNNlqOWW7UYikfCy1SXW3jyRAIRHWoAPXy5nPV__NUk7n-F9uwLurg6G7y_-mToFiOarqabmrONGVjKgWnXApkA91IFeU_xzcf1WvRBAMa_m6y3HxjqJkm5dCUM_26p78-MlqUoLdav3m0V3CfwY09FpSzRntR5_quzWruBE5qjIBUOybIeamuBYuUwiUt5CE_qMdZmHeUtY1eeb4XxrBlxXWNjUvvtYnT0KbGI"  
                  sh "export ROX_CENTRAL_ADDRESS=central.stackrox:443"
                  sh "roxctl -e ${ROX_CENTRAL_ADDRESS} image scan --image=${env.NEXUS_REGISTRY_SVC}/${imageName}:${devTag} --output=json"
                } else {
                  sh "ACS is not available"  
                }
          }
        }
    }
    // Create Service
    stage('Create Service') {
      when {
        expression {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              return !openshift.selector("svc", "${imageName}").exists()
            }
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              def template = './manifests/backend-svc-dev.yaml'
              openshift.apply(
                openshift.process("-f", template)
              )
            }
          }
        }
      }
    }
    // Create Route
    stage('Create Route') {
      when {
        expression {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              return !openshift.selector("route", "${imageName}").exists()
            }
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              def template = './manifests/backend-route-dev.yaml'
              openshift.apply(
                openshift.process("-f", template)
              )
            }
          }
        }
      }
    }
    // Create Deployment Config
    stage('Create Deployment Config') {
      steps {
        echo "Create deployment config: env.DEV_PROJECT"
        script {
          if(env.USE_INTERNAL_REGISTRY.toBoolean()){
            nexus_url = "image-registry.openshift-image-registry.svc:5000/ci-cd"
          } else {
            nexus_url = sh (
              script: 'oc get route nexus-registry -n ci-cd -o jsonpath="{.spec.host}"',
              returnStdout: true
            ).trim()
          }
          println "Set image repository to ${nexus_url}"
          openshift.withCluster() {
            openshift.withProject(env.DEV_PROJECT) {
              def template = './manifests/backend-dc-dev.yaml'
             
                openshift.apply(
                    openshift.process(
                      "-f", template,
                      "-p", "REPOSITORY=${nexus_url}",
                      "-p", "IMAGE_NAME=${imageName}",
                      "-p", "IMAGE_TAG=${devTag}",
                      "-p", "BACKEND_URL=${env.BACKEND_URL}",
                      "-p", "APP_VERSION=${version}"
                    )
                  )  
              //openshift.selector("dc", "${imageName}").rollout().pause();
            }
          }
        }
      }
    }
  }
}