def selectTag
def tag
def tags
def version
def activeApp
def destApp
def repository
    pipeline {
        agent {
        kubernetes {
        cloud 'openshift'
        yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  containers:
  - name: jnlp
    image: quay.io/openshift/origin-jenkins-agent-base:latest
    command:
    args: ['\${computer.jnlpmac}', '\${computer.name}']
    workingDir: /tmp
    tty: false
  - name: tools
    image: quay.io/voravitl/tools:jenkins
    command:
    - cat
    tty: true
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
"""
        }
    }
    options {
        // set a timeout of 40 minutes for this pipeline
        timeout(time: 40, unit: 'MINUTES')
    }
    environment {
        imageName = "backend"
        nexusContainerRepo = "docker"
    }
    stages {
        stage('Initial Configuration') {
            steps {
                script {
                    nexusUser = sh (
                        script: 'oc get secret ${NEXUS_SECRET} -o jsonpath="{.data.username}"| base64 -d -',
                         returnStdout: true
                     ).trim()
                    nexusPassword = sh (
                        script: 'oc get secret ${NEXUS_SECRET} -o jsonpath="{.data.password}"| base64 -d -',
                        returnStdout: true
                    ).trim()
                    def nexusCreds = 'nexus_host = "'+env.NEXUS_SVC+'"\nnexus_repository = "'+nexusContainerRepo+'"\n'+'nexus_username = "'+nexusUser+'"\n'+'nexus_password = "'+nexusPassword+'"\n'
                    writeFile file: ".credentials", text: nexusCreds
                }
            }
        }
        stage('Choose Production Version') {
            steps {
                script {
                        if(env.USE_INTERNAL_REGISTRY.toBoolean()){
                        println "OpenShift internal registry"
                        openshift.withCluster() {
                            namespace = openshift.project()
                            tags = openshift.selector("istag")
                            .objects()
                            .collect {
                            it.metadata.name
                            }
                            .findAll {
                            it ==~ /^backend:([0-9]+)\.([0-9]+)\.([0-9]+)\-([0-9]+)\-(.*)$/
                            //it.startsWith 'backend:([0-9]+)\.([0-9]+)\.([0-9]+)\-([0-9]+)'
                            }
                            .collect {
                            it.replaceAll(/backend:(.*)/, "\$1")
                            }
                            .sort()
                        timeout(5) {
                            selectTag = input(
                            ok: "Deploy Production",
                            message: "Enter release version to promote to Production",
                            parameters: [
                                choice(
                                choices: tags.join('\n'),
                                description: '',
                                name: 'Select Version'
                                )
                            ]
                            )
                        }
                        }
                    } else {
                        println "Nexus Registry"
                        container('tools'){
                            tags = sh (
                                script: 'nexus-cli image tags --name backend | grep -E "^([0-9]+).([0-9]+).([0-9]+)-([0-9]+)-(.*)$"',
                                returnStdout: true
                            )
                            timeout(5) {
                                selectTag = input(
                                ok: "Deploy Production",
                                message: "Enter release version to promote to Production",
                                parameters: [
                                    choice(
                                    choices: tags,
                                    description: '',
                                    name: 'Select Version'
                                    )
                                ]
                                )
                            }  
                        }
                    }
                    echo "selectTag = ${selectTag}"
                    version = selectTag.split('-')[0]
                    echo "version = ${version}"
                    tag = selectTag.split('-')[1] + "-" + selectTag.split('-')[2]
                    echo "tag = ${tag}"
                    if(env.USE_INTERNAL_REGISTRY.toBoolean()){
                        repository = "image-registry.openshift-image-registry.svc:5000/ci-cd"
                    } else {
                         repository =  sh (
                                            script: 'oc get route nexus-registry -n ci-cd -o jsonpath="{.spec.host}"',
                                            returnStdout: true
                                        ).trim()
                    }
                    println "Set image repository to ${repository}"
                }
            }
        }

        stage('Create Deployment Config Blue') {
            when {
                expression {
                    openshift.withCluster() {
                        openshift.withProject(env.PROD_PROJECT) {
                            return !openshift.selector("deployment", "${imageName}-blue").exists()
                        }
                    }
                }
            }
            steps {
                script {
                    println "Repository: $repository"
                    openshift.withCluster() {
                        openshift.withProject(env.PROD_PROJECT) {
                            def template = './manifests/backend-deployment-blue.yaml'
                            openshift.apply(
                                openshift.process("-f", template,
                                    "-p", "REPOSITORY=${repository}",
                                    "-p", "IMAGE_NAME=${imageName}",
                                    "-p", "IMAGE_TAG=0.0.0",
                                    "-p", "BACKEND_URL=${env.BACKEND_URL}",
                                    "-p", "MESSAGE=I am blue version",
                                    "-p", "APP_VERSION=${version}")
                            )
                        }
                    }
                }
            }
        }
        stage('Create Deployment Config Green') {
            when {
                expression {
                    openshift.withCluster() {
                        openshift.withProject(env.PROD_PROJECT) {
                            return !openshift.selector("deployment", "${imageName}-green").exists()
                        }
                    }
                }
            }
            steps {
                script {
                    println "Repository: $repository"
                    openshift.withCluster() {
                        openshift.withProject(env.PROD_PROJECT) {
                            def template = './manifests/backend-deployment-green.yaml'
                            openshift.apply(
                                openshift.process("-f", template,
                                    "-p", "REPOSITORY=${repository}",
                                    "-p", "IMAGE_NAME=${imageName}",
                                    "-p", "IMAGE_TAG=0.0.0",
                                    "-p", "BACKEND_URL=${env.BACKEND_URL}",
                                    "-p", "MESSAGE=I am green version",
                                    "-p", "APP_VERSION=${version}")
                            )

                        }
                    }
                }
            }
        }
        stage('Create Service Blue') {
            when {
                expression {
                    openshift.withCluster() {
                        openshift.withProject(env.PROD_PROJECT) {
                            return !openshift.selector("svc", "${imageName}-blue").exists()
                        }
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.PROD_PROJECT) {
                            def template = './manifests/backend-svc-blue.yaml'
                            openshift.apply(
                                openshift.process("-f", template)
                            )
                        }
                    }
                }
            }
        }
        stage('Create Service Green') {
            when {
                expression {
                    openshift.withCluster() {
                        openshift.withProject(env.PROD_PROJECT) {
                            return !openshift.selector("svc", "${imageName}-green").exists()
                        }
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.PROD_PROJECT) {
                            def template = './manifests/backend-svc-green.yaml'
                            openshift.apply(
                                openshift.process("-f", template)
                            )
                        }
                    }
                }
            }
        }
        stage('Create Route') {
            when {
                expression {
                    openshift.withCluster() {
                        openshift.withProject(env.PROD_PROJECT) {
                            return !openshift.selector("route", "${imageName}").exists()
                        }
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.PROD_PROJECT) {
                            def template = './manifests/backend-route-prod.yaml'
                            openshift.apply(
                                openshift.process("-f", template)
                            )
                        }
                    }
                }
            }
        }
        stage('Blue/Green Deployment') {
            steps {
                script {
                    echo "Blue/Green Deployment"
                    openshift.withCluster() {
                        openshift.withProject(env.PROD_PROJECT) {
                            activeApp = openshift.selector("route", "${imageName}").object().spec.to.name
                            if (activeApp == "${imageName}-green") {
                                destApp = "${imageName}-blue"
                            }
                            if (activeApp == "${imageName}-blue") {
                                destApp = "${imageName}-green"
                            }
                            echo "Active Application = ${activeApp}"
                            echo "Destination Application = ${destApp}"
                            numOfpods = openshift.selector("deployment", "${activeApp}").object().spec.replicas
                            echo "${activeApp} run with ${numOfpods} pods"
                            def dc = openshift.selector("deployment/${destApp}").object()
                            dc.spec.template.spec.containers[0].image = "${repository}/${imageName}:${selectTag}"
                            dc.spec.replicas = numOfpods
                            dc.metadata.labels["tag"] = tag
                            dc.metadata.labels["version"] = version
                            dc.spec.template.metadata.labels["tag"] = tag
                            dc.spec.template.metadata.labels["version"] = version
                            openshift.apply(dc)
                            // Set config map here
                            // -- code for setting config map here -- 
                            // Wait for app to deploy
                            // openshift.selector("deployment", "${destApp}").rollout().latest();
                            // def dc_prod = openshift.selector("deployment", "${destApp}").object()
                            // def dc_version = dc_prod.status.latestVersion
                            // def replicaset_prod = openshift.selector("replicaset", "${destApp}-${dc_version}").object()
                            // echo "Waiting for ${destApp} to be ready"

                            // while (replicaset_prod.spec.replicas != replicaset_prod.status.readyReplicas) {
                            //     sleep 5
                            //     replicaset_prod = openshift.selector("replicaset", "${destApp}-${dc_version}").object()
                            // }
                        }
                    }
                }
            }
        }
        stage('Switch over to new Version') {
            steps {
                echo "Switching Production application to ${destApp} with ${selectTag}"
                timeout(time: 15, unit: 'MINUTES') {
                    input message: "Switch to ${destApp} with ${selectTag}", ok: "Approve"
                }
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.PROD_PROJECT) {
                            def route = openshift.selector("route/${imageName}").object()
                            route.spec.to.name = "${destApp}"
                            openshift.apply(route)
                        }
                    }
                }

            }
        }
        stage('Scale down previous version') {
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    input message: "Scale down ${activeApp}", ok: "Approve"
                }
                script {
                    openshift.withCluster() {
                        openshift.withProject(env.PROD_PROJECT) {
                            echo "scale down ${activeApp}"
                            def dc = openshift.selector("deployment/${activeApp}").object()
                            dc.spec.replicas = 0
                            openshift.apply(dc)
                        }
                    }
                }
            }
        }
    }
}