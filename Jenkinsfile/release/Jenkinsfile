import java.text.SimpleDateFormat

def selectTag
def releaseTag
def nexusUser
def nexusPassword
def repository
def tag
def tags
node {
  def dateFormat = new SimpleDateFormat("yyyyMMdd")
  def date = new Date()
  def releaseDate = (dateFormat.format(date))
  tag = releaseDate + "-" + env.BUILD_NUMBER
}
pipeline {
  // agent {
  //   kubernetes {
  //     label "maven36-with-tools"
  //     cloud "openshift"
  //     inheritFrom "maven"
  //     containerTemplate {
  //       name "jnlp"
  //       image "image-registry.openshift-image-registry.svc:5000/ci-cd/${JENKINS_SLAVE_IMAGE}:latest"
  //       resourceRequestMemory "600Mi"
  //       resourceLimitMemory "2Gi"
  //       resourceRequestCpu "1"
  //       resourceLimitCpu "2"
  //     }
  //   }
  // }
 agent {
        kubernetes {
        cloud 'openshift'
        yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  containers:
  - name: jnlp
    image: quay.io/openshift/origin-jenkins-agent-base:latest
    command:
    args: ['\${computer.jnlpmac}', '\${computer.name}']
    workingDir: /tmp
    tty: false
  - name: skopeo
    image: quay.io/skopeo/stable:latest
    command:
    - cat
    tty: true
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
  - name: tools
    image: quay.io/voravitl/tools:jenkins
    command:
    - cat
    tty: true
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
"""
        }
  }
  options {
    // set a timeout of 20 minutes for this pipeline
    timeout(time: 20, unit: 'MINUTES')
  }
  environment {
    imageName="backend"
    nexusUser = ""
    nexusPassword =""
    nexusContainerRepo = "docker"
  }
  stages {
    stage('Initial Configuration') {
      steps {
        container("jnlp") {
            script {
              nexusUser = sh (
                  script: 'oc get secret ${NEXUS_SECRET} -o jsonpath="{.data.username}"| base64 -d -',
                  returnStdout: true
                ).trim()
              nexusPassword = sh (
                  script: 'oc get secret ${NEXUS_SECRET} -o jsonpath="{.data.password}"| base64 -d -',
                  returnStdout: true
                ).trim()
              def nexusCreds = 'nexus_host = "'+env.NEXUS_SVC+'"\nnexus_repository = "'+nexusContainerRepo+'"\n'+'nexus_username = "'+nexusUser+'"\n'+'nexus_password = "'+nexusPassword+'"\n'
              writeFile file: ".credentials", text: nexusCreds
            }
        }
        
      }
    }
    stage('Choose Staging Version') {
      steps {
        script {
          // select tag with nexus or internal registry
          if(env.USE_INTERNAL_REGISTRY.toBoolean()){
            println "OpenShift internal registry"
            openshift.withCluster() {
                namespace = openshift.project()
                tags = openshift.selector("istag")
                      .objects()
                      .collect {
                        it.metadata.name
                      }
                      .findAll {
                          it ==~ /^backend:([0-9]+)\.([0-9]+)\.([0-9]+)\-([0-9]+)$/
                  //it.startsWith 'backend:([0-9]+)\.([0-9]+)\.([0-9]+)\-([0-9]+)'
                      }
                      .collect {
                          it.replaceAll(/backend:(.*)/, "\$1")
                      }
                      .sort()
            }
            timeout(5) {
              selectTag = input(
                ok: "Deploy Staging",
                message: "Enter release version to promote to Staging",
                parameters: [
                  choice(
                    choices: tags.join('\n'),
                    description: '',
                    name: 'Release Version'
                  )
                ]
              )
            }
          } else {
            container("tools") {
              println "Nexus Registry"
              tags = sh (
                script: 'nexus-cli image tags --name backend | grep -E "^([0-9]+).([0-9]+).([0-9]+)-([0-9]+)$"',
                returnStdout: true
              )
              timeout(5) {
                selectTag = input(
                  ok: "Deploy Staging",
                  message: "Enter release version to promote to Staging",
                  parameters: [
                    choice(
                      choices: tags,
                      description: '',
                      name: 'Release Version'
                    )
                  ]
                )
              }
            }
          }
          println "selectTag = ${selectTag}"
          version = selectTag.split('-')[0]
          println "version = ${version}"
          println "tag = ${tag}"
          releaseTag = version + "-" + tag
          println "releaseTag = ${releaseTag}"
        }
      }
    }
    // stage('Tag Image') {
    stage('Release Image to Nexus') {
      steps {
        script {
          if(env.USE_INTERNAL_REGISTRY.toBoolean()){
            openshift.withCluster() {
              openshift.withProject(env.CICD_PROJECT) {
                println "Releasing image  ${imageName}:${selectTag} to ${env.NEXUS_REGISTRY_SVC}"
                //sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds ${nexusUser}:${nexusPassword} docker://image-registry.openshift-image-registry.svc.cluster.local:5000/${env.CICD_PROJECT}/${imageName}:${selectTag} ${env.NEXUS_REGISTRY_SVC}/${imageName}:${releaseTag}"
                openshift.tag("${imageName}:${selectTag}", "${imageName}:${releaseTag}")
              }
            }
          } else {
            container("skopeo") {
              println "Releasing image  ${imageName}:${selectTag} to ${env.NEXUS_REGISTRY_SVC}"
              sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds ${nexusUser}:${nexusPassword}  --dest-creds ${nexusUser}:${nexusPassword} docker://${env.NEXUS_REGISTRY_SVC}/${imageName}:${selectTag} docker://${env.NEXUS_REGISTRY_SVC}/${imageName}:${releaseTag}"  
            }
            
          }
          
        }
      }
    }
    stage('Tear-Down Stage') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              println "Tear-Down project ${env.STAGE_PROJECT}"
              openshift.raw("delete all -l app=${imageName}")
            }
          }
        }
      }
    }
    // Create Service
    stage('Create Service') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              def template = './manifests/backend-svc-stage.yaml'
              openshift.apply(
                openshift.process("-f", template)
              )
            }
          }
        }
      }
    }
    // Create Route
    stage('Create Route') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              def template = './manifests/backend-route-stage.yaml'
              openshift.apply(
                openshift.process("-f", template)
              )
            }
          }
        }
      }
    }
    // Create Deployment Config
    stage('Create Deployment') {
      steps {
        script {
          println "Deploy to: env.STAGE_PROJECT"
          println "IMAGE_TAG = ${releaseTag}"
          if(env.USE_INTERNAL_REGISTRY.toBoolean()){
            repository = "image-registry.openshift-image-registry.svc:5000/ci-cd"
          } else {
            repository =  sh (
              script: 'oc get route nexus-registry -n ci-cd -o jsonpath="{.spec.host}"',
              returnStdout: true
            ).trim()
          }
          println "Set image repository to ${repository}"
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              def template = './manifests/backend-deployment-stage.yaml'
                openshift.apply(
                    openshift.process(
                      "-f", template,
                      "-p", "REPOSITORY=${repository}",
                      "-p", "IMAGE_NAME=${imageName}",
                      "-p", "IMAGE_TAG=${releaseTag}",
                      "-p", "BACKEND_URL=${env.BACKEND_URL}",
                      "-p", "APP_VERSION=${version}"
                    )
                  )            
            }
          }
        }
      }
    }
    // Load Test with JMeter
    // stage('Load Test') {
    //   steps {
    //     script {
    //       openshift.withCluster() {
    //         openshift.withProject(env.STAGE_PROJECT) {
    //            def dc = openshift.selector("dc", "${imageName}").object()
    //            def dc_version = dc.status.latestVersion
    //            def rc = openshift.selector("rc", "${imageName}-${dc_version}").object()
    //            println "Waiting for ${imageName} to be ready"
    //            while (rc.spec.replicas != rc.status.readyReplicas) {
    //               sleep 5
    //               rc = openshift.selector("rc", "${imageName}-${dc_version}").object()
    //            }
    //            def jmeter =  sh (
    //                               script: 'jmeter.sh -n -t load-test/load-test.jmx -JHOST=$(oc get route backend -n stage -o jsonpath="{.spec.host}") -JTHREAD=10 -JLOOP=5 -JURI=/version',
    //                               returnStdout: true
    //                          ).trim()
    //            println "Result: ${jmeter}"
    //           //  sh "jmeter.sh -n -t load-test/load-test.jmx -JHOST=http://$(oc get route backend -n stage -o jsonpath='{.spec.host}') -JTHREAD=50 -JLOOP=5 -JURI=/version"
    //            sh "cat summary.log"
               
    //         }
    //       }
    //     }
    //   }
    // }
  }
}
