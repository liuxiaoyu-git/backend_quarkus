import java.text.SimpleDateFormat
def JENKINS_SLAVE_IMAGE = "maven36-with-tools"
def selectTag
def releaseTag
def tag
def nexusUser
def nexusPassword
node {
  def dateFormat = new SimpleDateFormat("yyyyMMdd")
  def date = new Date()
  def releaseDate = (dateFormat.format(date))
  tag = releaseDate + "-" + env.BUILD_NUMBER
  //docker://homework-nexus-registry.gpte-hw-cicd.svc.cluster.local:5000
}
pipeline {
  agent {
    kubernetes {
      label "maven36-with-tools"
      cloud "openshift"
      inheritFrom "maven"
      containerTemplate {
        name "jnlp"
        image "image-registry.openshift-image-registry.svc:5000/ci-cd/${JENKINS_SLAVE_IMAGE}:latest"
        resourceRequestMemory "600Mi"
        resourceLimitMemory "2Gi"
        resourceRequestCpu "1"
        resourceLimitCpu "2"
      }
    }
  }
  options {
    // set a timeout of 20 minutes for this pipeline
    timeout(time: 20, unit: 'MINUTES')
  }
  environment {
    mvnCmd = "mvn -s ./nexus_settings.xml "
    imageName="backend"
    nexusUser = ""
    nexusPassword =""
    nexusContainerRepo = "docker"
  }
  stages {
    stage('Initial Configuration') {
      steps {
        script {
          nexusUser = sh (
              script: 'oc get secret ${NEXUS_SECRET} -o jsonpath="{.data.username}"| base64 -d -',
              returnStdout: true
            ).trim()
          nexusPassword = sh (
              script: 'oc get secret ${NEXUS_SECRET} -o jsonpath="{.data.password}"| base64 -d -',
              returnStdout: true
            ).trim()
          def nexusCreds = 'nexus_host = "'+env.NEXUS_SVC+'"\nnexus_repository = "'+nexusContainerRepo+'"\n'+'nexus_username = "'+nexusUser+'"\n'+'nexus_password = "'+nexusPassword+'"\n'
          writeFile file: ".credentials", text: nexusCreds
          def backendTags = sh (
              script: 'nexus-cli image tags --name backend | grep -E "^([0-9]+).([0-9]+).([0-9]+)-([0-9]+)$"',
              returnStdout: true
            ).trim()
          println "Tags:\n ${backendTags}"
            //grep -E ""^([0-9]+)\\.([0-9]+)\\.([0-9]+)\\-([0-9]+)$""
        }
      }
    }
    stage('Choose Staging Version') {
      steps {
        script {
          openshift.withCluster() {
            namespace = openshift.project()
            def tags = openshift.selector("istag")
              .objects()
              .collect {
                it.metadata.name
              }
              .findAll {
                it ==~ /^backend:([0-9]+)\.([0-9]+)\.([0-9]+)\-([0-9]+)$/
                //it.startsWith 'backend:([0-9]+)\.([0-9]+)\.([0-9]+)\-([0-9]+)'
              }
              .collect {
                it.replaceAll(/backend:(.*)/, "\$1")
              }
              .sort()
            timeout(5) {
              selectTag = input(
                ok: "Deploy Staging",
                message: "Enter release version to promote to Staging",
                parameters: [
                  choice(
                    choices: tags.join('\n'),
                    description: '',
                    name: 'Release Version'
                  )
                ]
              )
            }
          }
          println "selectTag = ${selectTag}"
          version = selectTag.split('-')[0]
          println "version = ${version}"
          println "tag = ${tag}"
          releaseTag = version + "-" + tag
          println "releaseTag = ${releaseTag}"
        }
      }
    }
    // stage('Tag Image') {
    stage('Release Image to Nexus') {
      steps {
        script {
          nexusUser = sh (
              script: 'oc get secret ${NEXUS_SECRET} -o jsonpath="{.data.username}"| base64 -d -',
              returnStdout: true
            ).trim()
            nexusPassword = sh (
              script: 'oc get secret ${NEXUS_SECRET} -o jsonpath="{.data.password}"| base64 -d -',
              returnStdout: true
            ).trim()
          openshift.withCluster() {
            openshift.withProject(env.CICD_PROJECT) {
              println "Releasing image  ${imageName}:${selectTag} to ${env.NEXUS_REGISTRY_SVC}"
              sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds ${nexusUser}:${nexusPassword} docker://image-registry.openshift-image-registry.svc.cluster.local:5000/${env.CICD_PROJECT}/${imageName}:${selectTag} ${env.NEXUS_REGISTRY_SVC}/${imageName}:${releaseTag}"
              openshift.tag("${imageName}:${selectTag}", "${imageName}:${releaseTag}")
            }
          }
        }
      }
    }
    stage('Tear-Down Stage') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              println "Tear-Down project ${env.STAGE_PROJECT}"
              openshift.raw("delete all -l app=${imageName}")
            }
          }
        }
      }
    }
    // Create Service
    stage('Create Service') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              def template = './manifests/backend-svc-stage.yaml'
              openshift.apply(
                openshift.process("-f", template)
              )
            }
          }
        }
      }
    }
    // Create Route
    stage('Create Route') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              def template = './manifests/backend-route-stage.yaml'
              openshift.apply(
                openshift.process("-f", template)
              )
            }
          }
        }
      }
    }
    // Create Deployment Config
    stage('Create Deployment Config') {
      steps {
        println "Deploy to: env.STAGE_PROJECT"
        println "IMAGE_TAG = ${releaseTag}"
        script {
          openshift.withCluster() {
            openshift.withProject(env.STAGE_PROJECT) {
              def template = './manifests/backend-dc-stage.yaml'
              openshift.apply(
                openshift.process(
                  "-f", template,
                  "-p", "IMAGE_TAG=${releaseTag}",
                  "-p", "BACKEND_URL=${env.BACKEND_URL}",
                  "-p", "APP_VERSION=${version}"
                )
              )
            }
          }
        }
      }
    }
   }
}
